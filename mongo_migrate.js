// Generated by CoffeeScript 1.6.3
var Migrate, fibrous, fs, lazy, mongoose, slugify;

fs = require('fs');

lazy = require('lazy.js');

mongoose = require('mongoose');

fibrous = require('fibrous');

slugify = require('slugify');

Migrate = (function() {
  function Migrate(opts, model) {
    var connection, schema, _base;
    this.opts = opts;
    this.model = model;
    if (this.model == null) {
      if (typeof this.opts.mongo === 'function') {
        this.opts.mongo = this.opts.mongo();
      }
      connection = mongoose.createConnection(this.opts.mongo);
      schema = new mongoose.Schema({
        name: {
          type: String,
          index: true,
          unique: true,
          required: true
        },
        createdAt: {
          type: Date,
          "default": Date.now
        }
      });
      this.model = connection.model('MigrationVersion', schema, 'migration_versions');
    }
    if ((_base = this.opts).template == null) {
      _base.template = "module.exports =\n  requiresDowntime: FIXME # true or false\n\n  up: (done) ->\n    done()\n\n  down: (done) ->\n    throw new Error('irreversible migration')\n\n  test: (done) ->\n    console.log 'copying development to test'\n    require('child_process').exec \"mongo test --eval \"db.dropDatabase(); db.copyDatabase('development', 'test'); print('copied')\"\", ->\n      done()";
    }
  }

  Migrate.prototype.getTemplate = function(name) {
    return this.opts.template;
  };

  Migrate.prototype.log = function() {};

  Migrate.prototype.error = function(msg) {
    throw new Error(msg);
  };

  Migrate.prototype.get = function(name) {
    var migration;
    name = name.replace(/\.coffee$/, '');
    migration = require("" + this.opts.path + "/" + name);
    migration.name = name;
    return migration;
  };

  Migrate.prototype.exists = fibrous(function(name) {
    return this.model.sync.findOne({
      name: name
    }) != null;
  });

  Migrate.prototype.test = fibrous(function(name) {
    this.log("Testing migration `" + name + "`");
    return this.get(name).sync.test();
  });

  Migrate.prototype.one = fibrous(function(name) {
    return this.sync.all([name]);
  });

  Migrate.prototype.all = fibrous(function(migrations) {
    var migration, name, _i, _len;
    if (migrations == null) {
      migrations = this.sync.pending();
    }
    for (_i = 0, _len = migrations.length; _i < _len; _i++) {
      name = migrations[_i];
      if (this.sync.exists(name)) {
        this.error("`" + name + "` has already been run");
        return false;
      }
      migration = this.get(name);
      this.log("Running migration `" + migration.name + "`");
      migration.sync.up();
      this.model.sync.create({
        name: migration.name
      });
    }
    return true;
  });

  Migrate.prototype.down = fibrous(function() {
    var migration, version;
    version = this.model.sync.findOne({}, {
      name: 1
    }, {
      sort: {
        'name': -1
      }
    });
    migration = this.get(version.name);
    this.log("Reversing migration `" + migration.name + "`");
    migration.sync.down();
    return version.sync.remove();
  });

  Migrate.prototype.pending = fibrous(function() {
    var filenames, mv, names, run;
    filenames = fs.sync.readdir(this.opts.path).sort();
    ext = new RegExp("^([^_].+)\." + (this.opts.ext || 'coffee') + "$");
    names = lazy(filenames).map(function(filename) {
      var match;
      if (!(match = filename.match(ext))) {
        return;
      }
      return match[1];
    });
    names = lazy(names).compact();
    run = (function() {
      var _i, _len, _ref, _results;
      _ref = this.model.sync.find();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mv = _ref[_i];
        _results.push(mv.name);
      }
      return _results;
    }).call(this);
    return lazy(names).without(run).toArray();
  });

  Migrate.prototype.generate = fibrous(function(name) {
    var filename, timestamp;
    name = "" + (slugify(name, '_'));
    timestamp = (new Date()).toISOString().replace(/\D/g, '');
    filename = "" + this.opts.path + "/" + timestamp + "_" + name + "." + (this.opts.ext || 'coffee');
    fs.sync.writeFile(filename, this.getTemplate(name));
    return filename;
  });

  return Migrate;

})();

module.exports = Migrate;
